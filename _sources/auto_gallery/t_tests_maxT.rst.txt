

.. _sphx_glr_auto_gallery_t_tests_maxT.py:


T tests maxT
============

Credit: E Duchesnay



.. code-block:: python

    import numpy as np
    import mulm
    import pylab as plt

    n = 100
    px = 5
    py_info = 2
    py_noize = 100

    beta = np.array([1, 0, .5] + [0] * (px - 4) + [2]).reshape((px, 1))
    X = np.hstack([np.random.randn(n, px-1), np.ones((n, 1))]) # X with intercept
    Y = np.random.randn(n, py_info + py_noize)
    # Causal model: add X on the first py_info variable
    Y[:, :py_info] += np.dot(X, beta)

    # t-test all the regressors (by default mulm and sm do two-tailed tests)
    contrasts = np.identity(X.shape[1])

    mod = mulm.MUOLS(Y, X)
    tvals, rawp, df = mod.fit().t_test(contrasts, pval=True, two_tailed=True)
    tvals, maxTpval, df2 = mod.t_test_maxT(contrasts, two_tailed=True)

    n, bins, patches = plt.hist([rawp[0,:], maxTpval[0,:]],
                                color=['blue', 'red'],
                                label=['rawp','maxTpval'])
    plt.legend()
    plt.show()

**Total running time of the script:** ( 0 minutes  0.000 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: t_tests_maxT.py <t_tests_maxT.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: t_tests_maxT.ipynb <t_tests_maxT.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    Gallery generated by Sphinx-Gallery


